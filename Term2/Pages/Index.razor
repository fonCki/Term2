@page "/"
@using Term2.Services
@using System.Collections
@using System.Text.RegularExpressions


@inject Commands _commands
@inject IJSRuntime jsRuntime
@inject IApiClientService ApiClientService;

<PageTitle>alfonso.ridao</PageTitle>

<main class="main-index" onclick="@Focus">
    <div class="app-index">
        <div class="mobile">
                <MobileBanner/>
            </div>
        @if (HistoryCommands is not null) {
            @foreach (string command in HistoryCommands!) {
                <Terminal Command=@command Ronly="@true" Ip="@IpAddress"/>
                <Response Resp=@(_commands!._commandList!.FirstOrDefault(c => c!.Name.Equals(command)) ?? new Command(command))/>
            }
        }
        <Terminal
            Execute="@Execute"
            Command=@promptCache
            Ronly="@false"
            Cache="@Cache"
            FindHistory="@FindHistory"
            TabSearch="@TabSearch"
            ID=@("command" + @promptCache + @history)
            Ip="@IpAddress"/>
    </div>
</main>

@code {
    
    private List<string>? HistoryCommands { get; set; } = new List<string>();
    private ArrayList HistoryExecuted { get; set; } = new ArrayList();
    

    string IpAddress = "#unknown-user";
    string promptCache = "";
    int history = 0;

     protected override async Task OnInitializedAsync() {
         HistoryCommands!.Add("banner");
         IpAddress = await ApiClientService.GetUserIPAsync();

     }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await jsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    private void Execute(string command, bool ronly) {
        command = command.ToLower().Trim();
        promptCache = "";
        HistoryCommands?.Add(command);
        HistoryExecuted?.Add(command);
        history = HistoryExecuted!.Count;
        if (!ronly) {
            Command? _command = _commands?._commandList?.Find(c => c!.Name.Equals(command));
            Run(_command);
        }
        StateHasChanged();
    }
    

    // When I click in any part of the screen, always focus the last Input
    private void Focus() {
        jsRuntime.InvokeVoidAsync("focusInput", ("command"+promptCache+history));
    }

    private void Cache(string cache) {
        promptCache = cache;
        StateHasChanged();
    }
    
    private void FindHistory(string arrow) {
        if (arrow.Equals("ArrowUp")) {
                history = history - 1;
            }
            if (arrow.Equals("ArrowDown")) {
                history = history + 1;
            }
            if (history > HistoryExecuted.Count -1) {
                history = 0;
            }
            if (history < 0) {
                history = (HistoryExecuted.Count - 1 < 0) ? 0 : (HistoryExecuted.Count - 1);
            }
        
        if (HistoryExecuted.Count > 0) {
            promptCache = (string) HistoryExecuted[history]!;
            StateHasChanged();
        }
    }
    
    private void Run(Command? command) {
        if (command == null) return;
        if (!command.Link.Equals("")) {
            jsRuntime.InvokeAsync<object>("open", command.Link, "_blank");
        }
        else {
            if (command.Name.Equals("clear")) {
                HistoryCommands?.Clear();
            }
        }
    }

    private void TabSearch(string command) {
        promptCache = (_commands._commandList?.FirstOrDefault(c => c!.Name.Contains(command))?.Name ?? command);
        StateHasChanged();
    }

}